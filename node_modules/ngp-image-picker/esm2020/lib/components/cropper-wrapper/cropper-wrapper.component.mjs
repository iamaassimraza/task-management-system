import { Component, Input, Output, EventEmitter, HostListener } from '@angular/core';
import Croppr from '../../functions/croppr/index';
import * as i0 from "@angular/core";
export class CropperWrapperComponent {
    constructor() {
        this.imageSrc = '';
        this.croppr = null;
        this.croppSize = { width: 150, height: 150 };
        this.croppUpdate = new EventEmitter();
    }
    onKeyDown() {
        if (!this.croppr)
            return;
        this.croppr.options.aspectRatio = 1.0;
    }
    onKeyUp() {
        if (!this.croppr)
            return;
        this.croppr.options.aspectRatio = null;
    }
    set _imageSrc(value) {
        this.imageSrc = value;
    }
    set setSize(value) {
        this.croppSize = value;
        if (this.croppr)
            this.croppr.resizeTo(this.croppSize.width, this.croppSize.height);
    }
    ngOnInit() { }
    ngAfterViewInit() {
        this.croppr = new Croppr('#croppr', {
            minSize: [32, 32, 'px'],
            startSize: [this.croppSize.width, this.croppSize.height, 'px'],
            onInitialize: (data) => {
                this.croppUpdate.emit(data.getValue());
            },
            onCropEnd: (data) => {
                this.croppUpdate.emit(data);
            },
        });
    }
    ngOnDestroy() {
        if (!this.croppr)
            return;
        this.croppr.destroy();
    }
}
CropperWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: CropperWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CropperWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: CropperWrapperComponent, selector: "lib-cropper-wrapper", inputs: { _imageSrc: "_imageSrc", setSize: "setSize" }, outputs: { croppUpdate: "croppUpdate" }, host: { listeners: { "document:keydown.Control": "onKeyDown($event)", "document:keyup.Control": "onKeyUp($event)" } }, ngImport: i0, template: "<img id=\"image-full\" [src]=\"this.imageSrc\" id=\"croppr\" />\n", styles: [""] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: CropperWrapperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-cropper-wrapper', template: "<img id=\"image-full\" [src]=\"this.imageSrc\" id=\"croppr\" />\n" }]
        }], ctorParameters: function () { return []; }, propDecorators: { onKeyDown: [{
                type: HostListener,
                args: ['document:keydown.Control', ['$event']]
            }], onKeyUp: [{
                type: HostListener,
                args: ['document:keyup.Control', ['$event']]
            }], _imageSrc: [{
                type: Input
            }], setSize: [{
                type: Input
            }], croppUpdate: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JvcHBlci13cmFwcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25ncC1pbWFnZS1waWNrZXIvc3JjL2xpYi9jb21wb25lbnRzL2Nyb3BwZXItd3JhcHBlci9jcm9wcGVyLXdyYXBwZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdwLWltYWdlLXBpY2tlci9zcmMvbGliL2NvbXBvbmVudHMvY3JvcHBlci13cmFwcGVyL2Nyb3BwZXItd3JhcHBlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBeUIsTUFBTSxFQUFFLFlBQVksRUFBYSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkgsT0FBTyxNQUFNLE1BQU0sOEJBQThCLENBQUM7O0FBT2xELE1BQU0sT0FBTyx1QkFBdUI7SUFnQ2xDO1FBL0JBLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFDdEIsV0FBTSxHQUE4QixJQUFJLENBQUM7UUFDekMsY0FBUyxHQUFzQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBc0JqRSxnQkFBVyxHQUEwRSxJQUFJLFlBQVksRUFLM0csQ0FBQztJQUVVLENBQUM7SUExQmhCLFNBQVM7UUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07WUFBRSxPQUFPO1FBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7SUFDeEMsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07WUFBRSxPQUFPO1FBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDekMsQ0FBQztJQUVELElBQWEsU0FBUyxDQUFDLEtBQWE7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFlLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQWEsT0FBTyxDQUFDLEtBQVU7UUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxJQUFJLENBQUMsTUFBTTtZQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckYsQ0FBQztJQVdELFFBQVEsS0FBVSxDQUFDO0lBQ25CLGVBQWU7UUFDYixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUNsQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQztZQUN2QixTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7WUFDOUQsWUFBWSxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ3pDLENBQUM7WUFDRCxTQUFTLEVBQUUsQ0FBQyxJQUE2RCxFQUFFLEVBQUU7Z0JBQzNFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlCLENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUFFLE9BQU87UUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN4QixDQUFDOztvSEFuRFUsdUJBQXVCO3dHQUF2Qix1QkFBdUIsbVJDUnBDLG1FQUNBOzJGRE9hLHVCQUF1QjtrQkFMbkMsU0FBUzsrQkFDRSxxQkFBcUI7MEVBVS9CLFNBQVM7c0JBRFIsWUFBWTt1QkFBQywwQkFBMEIsRUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFNcEQsT0FBTztzQkFETixZQUFZO3VCQUFDLHdCQUF3QixFQUFFLENBQUMsUUFBUSxDQUFDO2dCQU1yQyxTQUFTO3NCQUFyQixLQUFLO2dCQUlPLE9BQU87c0JBQW5CLEtBQUs7Z0JBS0ksV0FBVztzQkFBcEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgQ3JvcHByIGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9jcm9wcHIvaW5kZXgnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaWItY3JvcHBlci13cmFwcGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Nyb3BwZXItd3JhcHBlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2Nyb3BwZXItd3JhcHBlci5jb21wb25lbnQuc2NzcyddLFxufSlcbmV4cG9ydCBjbGFzcyBDcm9wcGVyV3JhcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgaW1hZ2VTcmM6IHN0cmluZyA9ICcnO1xuICBjcm9wcHI6IENyb3BwciB8IHVuZGVmaW5lZCB8IG51bGwgPSBudWxsO1xuICBjcm9wcFNpemU6IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfSA9IHsgd2lkdGg6IDE1MCwgaGVpZ2h0OiAxNTAgfTtcblxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDprZXlkb3duLkNvbnRyb2wnLCBbJyRldmVudCddKVxuICBvbktleURvd24oKSB7XG4gICAgaWYgKCF0aGlzLmNyb3BwcikgcmV0dXJuO1xuICAgIHRoaXMuY3JvcHByLm9wdGlvbnMuYXNwZWN0UmF0aW8gPSAxLjA7XG4gIH1cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6a2V5dXAuQ29udHJvbCcsIFsnJGV2ZW50J10pXG4gIG9uS2V5VXAoKSB7XG4gICAgaWYgKCF0aGlzLmNyb3BwcikgcmV0dXJuO1xuICAgIHRoaXMuY3JvcHByLm9wdGlvbnMuYXNwZWN0UmF0aW8gPSBudWxsO1xuICB9XG5cbiAgQElucHV0KCkgc2V0IF9pbWFnZVNyYyh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5pbWFnZVNyYyA9IHZhbHVlIGFzIHN0cmluZztcbiAgfVxuXG4gIEBJbnB1dCgpIHNldCBzZXRTaXplKHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLmNyb3BwU2l6ZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmNyb3BwcikgdGhpcy5jcm9wcHIucmVzaXplVG8odGhpcy5jcm9wcFNpemUud2lkdGgsIHRoaXMuY3JvcHBTaXplLmhlaWdodCk7XG4gIH1cblxuICBAT3V0cHV0KCkgY3JvcHBVcGRhdGU6IEV2ZW50RW1pdHRlcjx7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9PiA9IG5ldyBFdmVudEVtaXR0ZXI8e1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgfT4oKTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7fVxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5jcm9wcHIgPSBuZXcgQ3JvcHByKCcjY3JvcHByJywge1xuICAgICAgbWluU2l6ZTogWzMyLCAzMiwgJ3B4J10sXG4gICAgICBzdGFydFNpemU6IFt0aGlzLmNyb3BwU2l6ZS53aWR0aCwgdGhpcy5jcm9wcFNpemUuaGVpZ2h0LCAncHgnXSxcbiAgICAgIG9uSW5pdGlhbGl6ZTogKGRhdGE6IENyb3BwcikgPT4ge1xuICAgICAgICB0aGlzLmNyb3BwVXBkYXRlLmVtaXQoZGF0YS5nZXRWYWx1ZSgpKTtcbiAgICAgIH0sXG4gICAgICBvbkNyb3BFbmQ6IChkYXRhOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9KSA9PiB7XG4gICAgICAgIHRoaXMuY3JvcHBVcGRhdGUuZW1pdChkYXRhKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY3JvcHByKSByZXR1cm47XG4gICAgdGhpcy5jcm9wcHIuZGVzdHJveSgpO1xuICB9XG59XG4iLCI8aW1nIGlkPVwiaW1hZ2UtZnVsbFwiIFtzcmNdPVwidGhpcy5pbWFnZVNyY1wiIGlkPVwiY3JvcHByXCIgLz5cbiJdfQ==